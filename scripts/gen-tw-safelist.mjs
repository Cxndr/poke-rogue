#!/usr/bin/env node
import { readFile, writeFile, mkdir } from 'node:fs/promises';
import { dirname, resolve } from 'node:path';

const projectRoot = process.cwd();
const colorsPath = resolve(projectRoot, 'src/lib/colors.ts');
const outPath = resolve(projectRoot, 'src/lib/tw-safelist.ts');

function extractObjectBlock(src, varName) {
  // Match: export const varName ... = { ... };
  const re = new RegExp(`export\\s+const\\s+${varName}[^=]*=\\s*{([\\s\\S]*?)}\\s*;`);
  const m = src.match(re);
  return m ? m[1] : '';
}

function extractTokensFromBlock(block) {
  // Capture string values on the right side of key: "value"
  const tokens = new Set();
  const re = /:\s*"([^"]+)"/g;
  let m;
  while ((m = re.exec(block)) !== null) {
    tokens.add(m[1]);
  }
  return Array.from(tokens);
}

function isLikelyValidToken(token) {
  // Very loose heuristic: <colorName>-<number> or a few neutrals like gray-400, sky-400, etc.
  return /^(?:[a-z]+)-(?:[0-9]{2,3})$/.test(token);
}

function buildClasses(tokens) {
  const utilities = [
    'text', 'bg', 'border', 'border-t', 'border-r', 'border-b', 'border-l',
    'ring', 'outline', 'from', 'to', 'via'
  ];
  const classes = [];
  const invalid = [];
  for (const t of tokens) {
    if (!isLikelyValidToken(t)) invalid.push(t);
    for (const u of utilities) {
      classes.push(`${u}-${t}`);
    }
  }
  return { classes: classes.join(' '), invalid };
}

async function run() {
  const src = await readFile(colorsPath, 'utf8');

  const typeBlock = extractObjectBlock(src, 'pokemonTypeColors');
  const itemBlock = extractObjectBlock(src, 'itemTypeColors');

  const tokens = Array.from(new Set([
    ...extractTokensFromBlock(typeBlock),
    ...extractTokensFromBlock(itemBlock),
  ]));

  const { classes, invalid } = buildClasses(tokens);

  const fileContent = `// AUTO-GENERATED BY scripts/gen-tw-safelist.mjs. DO NOT EDIT.\n// Sourced from src/lib/colors.ts\n\nexport const TAILWIND_SAFELIST = \`\n${classes}\n\`;\n`;

  await mkdir(dirname(outPath), { recursive: true });
  await writeFile(outPath, fileContent, 'utf8');
  console.log(`[tw-safelist] Generated ${outPath} with ${tokens.length} tokens.`);
  if (invalid.length) {
    console.warn(`[tw-safelist] Warning: ${invalid.length} token(s) look invalid:`, invalid.join(', '));
  }
}

run().catch((err) => {
  console.error('[tw-safelist] Generation failed:', err);
  process.exit(1);
});

